
<img src="https://user-images.githubusercontent.com/7065401/58563302-42466a80-8201-11e9-9948-b3e9f88a5662.jpg"
    style="width:400px; float: right; margin: 0 40px 40px 40px;"></img>

# Exercises
## Bike store sales

## Начинаем)! 
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

%matplotlib inline
sales = pd.read_csv(
    'sales_data.csv',
    parse_dates=['Date'])
sales.head()

### What's the mean of `Customers_Age`?
sales['Customer_Age'].mean()

###Go ahead and show a <b>density (KDE)</b> and a <b>box plot</b> with the `Customer_Age` data:
sales['Customer_Age'].plot(kind='box', vert=False, figsize=(18,6))



### What's the mean of `Order_Quantity`?
sales['Order_Quantity'].mean()
sales['Order_Quantity'].plot(kind='box', vert=False, figsize=(18,6))

###Go ahead and show a <b>histogram</b> and a <b>box plot</b> with the `Order_Quantity` data:
sales.hist(column='Order_Quantity')


### How many sales per year do we have?
sales[['Order_Quantity','Year']].groupby('Year').count()

###Go ahead and show a <b>pie plot</b> with the previous data:
sales[['Order_Quantity','Year']].groupby('Year').count().plot(kind='pie', figsize=(6,6),subplots=True)

### How many sales per month do we have?
sales[['Order_Quantity','Month']].groupby('Month').count()

### Go ahead and show a <b>bar plot</b> with the previous data:
sales[['Order_Quantity','Month']].groupby('Month').count().plot(kind='bar', figsize=(6,6),subplots=True)


### Which country has the most sales `quantity of sales`?
sales[['Country', 'Order_Quantity']].groupby('Country').count().idxmax()

### Go ahead and show a <b>bar plot</b> of the sales per country:
sales[['Order_Quantity','Month']].groupby('Month').count().plot(kind='bar', figsize=(6,6),subplots=True)



### Create a list of every product sold
sales.groupby('Product').agg({'Order_Quantity': 'sum'})

### Create a **bar plot** showing the 10 most sold products (best sellers):

sales.groupby('Product').agg({'Order_Quantity': 'sum'}).head().plot(kind='bar', figsize=(6,6),subplots=True)

### Can you see any relationship between `Unit_Cost` and `Unit_Price`?

### Show a <b>scatter plot</b> between both columns.

sales.plot(kind='scatter', x='Unit_Cost', y='Unit_Price', figsize=(6,6))



### Can you see any relationship between `Order_Quantity` and `Profit`?


### Show a <b>scatter plot</b> between both columns.
sales.plot(kind='scatter', x='Order_Quantity', y='Profit', figsize=(6,6))


### Can you see any relationship between `Profit` per `Country`?

### Show a grouped <b>box plot</b> per country with the profit values.
sales['Profit'].plot(kind='box', vert=False, figsize=(18,6))


### Can you see any relationship between the `Customer_Age` per `Country`?

### Show a grouped <b>box plot</b> per country with the customer age values.
sales.plot(kind='box', x='Country', y='Customer_Age', figsize=(6,6))


### Add and calculate a new `Calculated_Date` column

Use `Day`, `Month`, `Year` to create a `Date` column (`YYYY-MM-DD`).
month_mapping = {
    'January': 1,
    'February': 2,
    'March': 3,
    'April': 4,
    'May': 5,
    'June': 6,
    'July': 7,
    'August': 8,
    'September': 9,
    'October': 10,
    'November': 11,
    'December': 12
}

sales['Month'] = sales['Month'].map(month_mapping)
sales['Date'] = pd.to_datetime(sales[['Year', 'Month', 'Day']])
sales


### Parse your `Calculated_Date` column into a datetime object

sales['Date'].astype='date'
print(sales['Date'].dtype)

### How did sales evolve through the years?

### Show a <b>line plot</b> using `Calculated_Date` column as the x-axis and the count of sales as the y-axis.
sales_evove_by_year=sales.groupby(['Year']).size().reset_index(name='Count')
sales_evove_by_year

sales_evove_by_year.plot(kind='line', x='Year', y='Count', figsize=(6,6))

### Increase 50 U$S revenue to every sale
sales['Revenue'] +50

### How many orders were made in `Canada` or `France`?
can_sales = sales.groupby('Country').size().reset_index(name='Count')

can_sales = can_sales[can_sales['Country'].isin(['Canada'])]

print(can_sales)


### How many `Bike Racks` orders were made from Canada?
Bike_Racks_Canada= sales.groupby(['Sub_Category','Country']).size().reset_index(name='Count')

Bike_Racks_Canada = Bike_Racks_Canada[
    (Bike_Racks_Canada['Sub_Category']=='Bike Racks') &
    (Bike_Racks_Canada['Country']=='Canada')]

print(Bike_Racks_Canada)

### How many orders were made in each region (state) of France?
France_regions_sales = sales.groupby(['Country', 'State']).size().reset_index(name='Orders_quantity')
France_regions=France_regions_sales[France_regions_sales['Country']=='France']
France_regions

### Go ahead and show a <b>bar plot</b> with the results:
France_regions=France_regions_sales[France_regions_sales['Country']=='France'].plot(kind='bar', figsize=(6,6),subplots=True)

### How many sales were made per category?
France_regions_sales_category = sales.groupby(['Product_Category']).size().reset_index(name='Orders_quantity')
France_regions_sales_category
### Go ahead and show a <b>pie plot</b> with the results:
sales['Product_Category'].value_counts().plot(kind='pie', figsize=(6,6))



### How many orders were made per accessory sub-categories?
num = sales[sales['Product_Category'] == 'Accessories'].groupby(['Sub_Category']).size().reset_index(name='Orders_quantity')
num
### Go ahead and show a <b>bar plot</b> with the results:
num.plot(kind='bar', figsize=(6,6),subplots=True)


### How many orders were made per bike sub-categories?
sales[sales['Product_Category'] == 'Bikes'].groupby(['Sub_Category']).size().reset_index(name='Orders_quantity')
### Go ahead and show a <b>pie plot</b> with the results:
sales['Sub_Category'].value_counts().plot(kind='pie', figsize=(6,6), subplots=True)


### Which gender has the most amount of sales?
sales[['Order_Quantity','Customer_Gender']].groupby('Customer_Gender').count()


### How many sales with more than 500 in `Revenue` were made by men?
men_purchase=sales[(sales['Customer_Gender']=='M')&(sales['Revenue']>500)]
men_purchase['Customer_Gender'].count()

### Get the top-5 sales with the highest revenue

sales['Revenue'].sort_values().sort_values(ascending=False).head()

### Get the sale with the highest revenue
sales['Revenue'].sort_values().sort_values(ascending=False).head(1)

### What is the mean `Order_Quantity` of orders with more than 10K in revenue?

sales[sales['Revenue']>10000]['Order_Quantity'].mean()

### What is the mean `Order_Quantity` of orders with less than 10K in revenue?
sales[sales['Revenue']<10000]['Order_Quantity'].mean()

### How many orders were made in May of 2016?
sales[(sales['Date'].dt.year == 2016) & (sales['Date'].dt.month == 5)]
sales['Order_Quantity']

### How many orders were made between May and July of 2016?
sales[(sales['Date'].dt.year == 2016) & (sales['Date'].dt.month >= 5) & (sales['Date'].dt.month <= 7)]
### Show a grouped <b>box plot</b> per month with the profit values.
boxplot(column='Profit', by='Month', figsize=(10, 6))


### Add 7.2% TAX on every sale `Unit_Price` within United States
sales.loc[sales['Country'] == 'United States', 'Revenue'] * 0.072

